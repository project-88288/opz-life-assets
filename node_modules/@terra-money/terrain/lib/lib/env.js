"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getEnv = void 0;
const tslib_1 = require("tslib");
const terra_js_1 = require("@terra-money/terra.js");
const R = tslib_1.__importStar(require("ramda"));
const config_1 = require("../config");
const deployment_1 = require("./deployment");
const LCDClientExtra_1 = require("./LCDClientExtra");
exports.getEnv = (configPath, keysPath, refsPath, network, defaultWallet) => {
    const connections = config_1.loadConnections(configPath);
    const config = config_1.loadConfig(configPath);
    const globalConfig = config_1.loadGlobalConfig(configPath);
    const keys = config_1.loadKeys(keysPath);
    const refs = config_1.loadRefs(refsPath)[network];
    const lcd = new LCDClientExtra_1.LCDClientExtra(connections(network), refs);
    const userDefinedWallets = R.map((k) => new terra_js_1.Wallet(lcd, k), keys);
    const wallets = Object.assign(Object.assign({}, new terra_js_1.LocalTerra().wallets), userDefinedWallets);
    if (!(defaultWallet in wallets)) {
        throw new Error('default wallet not found');
    }
    return {
        config: (contract) => config(network, contract),
        refs,
        wallets,
        defaultWallet: wallets[defaultWallet],
        client: lcd,
        // Enable tasks to deploy code.
        deploy: {
            build: (contract) => deployment_1.build({
                contract,
            }),
            optimize: (contract) => deployment_1.optimize({
                contract,
                useCargoWorkspace: globalConfig.useCargoWorkspace,
            }),
            storeCode: (contract, signer, options) => deployment_1.storeCode({
                signer,
                contract,
                network,
                refsPath,
                lcd,
                conf: config(network, contract),
                noRebuild: typeof (options === null || options === void 0 ? void 0 : options.noRebuild) === 'undefined' ? false : options.noRebuild,
                useCargoWorkspace: globalConfig.useCargoWorkspace,
            }),
            instantiate: (contract, signer, options) => deployment_1.instantiate({
                instanceId: options === null || options === void 0 ? void 0 : options.instanceId,
                codeId: options === null || options === void 0 ? void 0 : options.codeId,
                signer,
                contract,
                network,
                refsPath,
                lcd,
                admin: options === null || options === void 0 ? void 0 : options.admin,
                // Use the instantiation message passed instead of default.
                conf: (options === null || options === void 0 ? void 0 : options.init) ? { instantiation: { instantiateMsg: options.init } }
                    : config(network, contract),
            }),
        },
    };
};
