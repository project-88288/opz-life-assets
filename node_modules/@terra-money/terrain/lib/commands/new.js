"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const command_1 = require("@oclif/command");
const template_scaffolding_1 = require("@terra-money/template-scaffolding");
const cli_ux_1 = tslib_1.__importDefault(require("cli-ux"));
const path = tslib_1.__importStar(require("path"));
const fs = tslib_1.__importStar(require("fs"));
const child_process_1 = require("child_process");
const case_1 = require("case");
class New extends command_1.Command {
    async run() {
        const { args, flags } = this.parse(New);
        const appDir = path.join(process.cwd(), flags.path, args.name);
        const contractDir = path.join(appDir, 'contracts', args.name);
        const frontendDir = path.join(appDir, 'frontend');
        if (fs.existsSync(appDir)) {
            throw Error(`Folder '${args.name}' already exists under path '${flags.path}'.\nTip: Use another path or project name`);
        }
        const templateEntries = {
            'project-name': args.name,
            'client-name': `${case_1.pascal(args.name)}Client`,
            // Crates cannot have dashes, and Rust will map underscores to dashes for us.
            crate_name: args.name.replaceAll('-', '_'),
            authors: flags.authors,
            ' "now" | date: "%Y" ': `${new Date().getFullYear()}`,
        };
        cli_ux_1.default.log(`generating app ${args.name}:`);
        cli_ux_1.default.action.start('- workspace');
        await template_scaffolding_1.TemplateScaffolding.from({
            remoteUrl: 'https://codeload.github.com/terra-money/terrain-core-template/zip/refs/heads/main',
            subFolder: 'terrain-core-template-main',
            localOptions: {
                folderUrl: appDir,
            },
            replace: {
                entries: templateEntries,
            },
        });
        cli_ux_1.default.action.stop();
        cli_ux_1.default.action.start('- contract');
        await template_scaffolding_1.TemplateScaffolding.from({
            remoteUrl: `https://codeload.github.com/InterWasm/cw-template/zip/refs/heads/${flags.version}`,
            subFolder: `cw-template-${flags.version}`,
            localOptions: {
                folderUrl: contractDir,
            },
            replace: {
                entries: templateEntries,
            },
        });
        cli_ux_1.default.action.stop();
        cli_ux_1.default.action.start('- frontend');
        if (flags.framework === 'react') {
            await template_scaffolding_1.TemplateScaffolding.from({
                remoteUrl: 'https://codeload.github.com/terra-money/terrain-frontend-template/zip/refs/heads/main',
                subFolder: 'terrain-frontend-template-main',
                localOptions: {
                    folderUrl: frontendDir,
                },
                replace: {
                    entries: templateEntries,
                },
            });
        }
        else {
            await template_scaffolding_1.TemplateScaffolding.from({
                remoteUrl: 'https://codeload.github.com/terra-money/wallet-provider/zip/refs/heads/main',
                subFolder: `wallet-provider-main/templates/${flags.framework}`,
                localOptions: {
                    folderUrl: frontendDir,
                },
            });
        }
        cli_ux_1.default.action.stop();
        // Install app dependencies.
        process.chdir(appDir);
        cli_ux_1.default.action.start('- installing app dependencies');
        await child_process_1.execSync('npm i --silent', { stdio: 'inherit' });
        cli_ux_1.default.action.stop();
        // Install frontend dependencies.
        cli_ux_1.default.action.start('- installing frontend dependencies');
        process.chdir(frontendDir);
        await child_process_1.execSync('npm i --silent', { stdio: 'inherit' });
        cli_ux_1.default.action.stop();
    }
}
exports.default = New;
New.description = 'Create new dapp from template.';
New.examples = [
    '$ terrain new awesome-dapp',
    '$ terrain new awesome-dapp --path path/to/dapp',
    '$ terrain new awesome-dapp --path path/to/dapp --authors "ExampleAuthor<example@email.domain>"',
    '$ terrain new awesome-dapp --path path/to/dapp --framework vue --authors "ExampleAuthor<example@email.domain>"',
];
New.flags = {
    path: command_1.flags.string({
        description: 'Path to create the workspace',
        default: '.',
    }),
    framework: command_1.flags.string({
        description: 'Choose the frontend framework you want to use. Non-react framework options have better wallet-provider support but less streamlined contract integration.',
        options: ['react', 'vue', 'svelte', 'next', 'vite', 'lit'],
        default: 'react',
    }),
    version: command_1.flags.string({
        default: '1.0',
    }),
    authors: command_1.flags.string({
        default: 'Terra Money <core@terra.money>',
    }),
};
New.args = [{ name: 'name', required: true }];
