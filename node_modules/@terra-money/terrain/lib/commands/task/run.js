"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.task = void 0;
const tslib_1 = require("tslib");
const command_1 = require("@oclif/command");
const path = tslib_1.__importStar(require("path"));
const cli_ux_1 = require("cli-ux");
const fs = tslib_1.__importStar(require("fs-extra"));
const env_1 = require("../../lib/env");
const flag = tslib_1.__importStar(require("../../lib/flag"));
const runScript_1 = tslib_1.__importDefault(require("../../lib/runScript"));
exports.task = async (fn) => {
    try {
        await fn(env_1.getEnv(process.env.configPath || '', process.env.keysPath || '', process.env.refsPath || '', process.env.network || '', process.env.signer || ''));
    }
    catch (err) {
        if (err instanceof Error) {
            cli_ux_1.cli.error(err);
        }
        if (typeof err === 'string') {
            cli_ux_1.cli.error(err);
        }
        cli_ux_1.cli.error(`${err}`);
    }
};
class Run extends command_1.Command {
    async run() {
        const { args, flags } = this.parse(Run);
        let scriptPath = Run.fromCwd(`tasks/${args.task}.ts`);
        if (!fs.existsSync(scriptPath)) {
            scriptPath = Run.fromCwd(`tasks/${args.task}.js`);
        }
        await new Promise((resolve, reject) => {
            runScript_1.default(scriptPath, {
                configPath: Run.fromCwd(flags['config-path']),
                keysPath: Run.fromCwd(flags['keys-path']),
                refsPath: Run.fromCwd(flags['refs-path']),
                network: flags.network,
                signer: flags.signer,
            }, (err) => {
                if (err)
                    reject(err);
                resolve();
            });
        });
    }
}
exports.default = Run;
Run.description = 'run predefined task';
Run.flags = {
    signer: flag.signer,
    network: command_1.flags.string({ default: 'localterra' }),
    'config-path': command_1.flags.string({ default: 'config.terrain.json' }),
    'refs-path': command_1.flags.string({ default: 'refs.terrain.json' }),
    'keys-path': command_1.flags.string({ default: 'keys.terrain.js' }),
};
Run.args = [{ name: 'task' }];
Run.fromCwd = (p) => path.join(process.cwd(), p);
