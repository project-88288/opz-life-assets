"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const command_1 = require("@oclif/command");
const YAML = tslib_1.__importStar(require("yaml"));
const terra_js_1 = require("@terra-money/terra.js");
const cli_ux_1 = require("cli-ux");
const config_1 = require("../../config");
const signer_1 = require("../../lib/signer");
const flag = tslib_1.__importStar(require("../../lib/flag"));
class ContractUpdateAdmin extends command_1.Command {
    async run() {
        const { args, flags } = this.parse(ContractUpdateAdmin);
        const connections = config_1.loadConnections(flags['config-path']);
        const refs = config_1.loadRefs(flags['refs-path']);
        const { network } = flags;
        const lcd = new terra_js_1.LCDClient(connections(flags.network));
        const signer = signer_1.getSigner({
            network: flags.network,
            signerId: flags.signer,
            keysPath: flags['keys-path'],
            lcd,
        });
        const contractAddress = refs[network][args.contract].contractAddresses[flags['instance-id']];
        cli_ux_1.cli.action.start(`updating contract admin to: ${args.admin}`);
        const updateAdminTx = await signer.createAndSignTx({
            msgs: [
                new terra_js_1.MsgUpdateContractAdmin(signer.key.accAddress, args.admin, contractAddress),
            ],
        });
        const res = await lcd.tx.broadcast(updateAdminTx);
        cli_ux_1.cli.action.stop();
        if (res) {
            cli_ux_1.cli.log(YAML.stringify(JSON.parse(res.raw_log)));
        }
        else {
            cli_ux_1.cli.error('transaction not included in block before timeout');
        }
    }
}
exports.default = ContractUpdateAdmin;
ContractUpdateAdmin.description = 'Update the admin of a contract.';
ContractUpdateAdmin.flags = {
    signer: flag.signer,
    network: flag.network,
    'config-path': command_1.flags.string({ default: './config.terrain.json' }),
    'refs-path': command_1.flags.string({ default: './refs.terrain.json' }),
    'keys-path': command_1.flags.string({ default: './keys.terrain.js' }),
    'instance-id': command_1.flags.string({ default: 'default' }),
};
ContractUpdateAdmin.args = [
    { name: 'contract', required: true },
    { name: 'admin', required: true },
];
