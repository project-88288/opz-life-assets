"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const command_1 = require("@oclif/command");
const cli_ux_1 = require("cli-ux");
const child_process_1 = require("child_process");
const fs = tslib_1.__importStar(require("fs-extra"));
const case_1 = require("case");
const TerrainCLI_1 = tslib_1.__importDefault(require("../../TerrainCLI"));
const generateClient_1 = tslib_1.__importDefault(require("../../lib/generateClient"));
class GenerateClient extends command_1.Command {
    async run() {
        const { args, flags } = this.parse(GenerateClient);
        const contractPath = `contracts/${args.contract}`;
        if (flags['build-schema']) {
            cli_ux_1.cli.action.start('running cargo schema');
            const workingDirectory = process.cwd();
            process.chdir(contractPath);
            child_process_1.execSync('cargo schema', { stdio: 'inherit' });
            // Move back to starting point.
            process.chdir(workingDirectory);
            cli_ux_1.cli.action.stop();
        }
        cli_ux_1.cli.action.start(`generating ${case_1.pascal(args.contract)}Client.ts`);
        await generateClient_1.default(case_1.pascal(args.contract), `./contracts/${args.contract}/schema`, `${flags['lib-path']}/clients`);
        cli_ux_1.cli.action.stop();
        cli_ux_1.cli.action.start('syncing clients to frontend');
        if (!fs.pathExistsSync('./frontend')) {
            TerrainCLI_1.default.warning('no frontend directory found, not syncing refs');
            cli_ux_1.cli.action.stop();
            return;
        }
        fs.copySync(flags['lib-path'], flags.dest);
        cli_ux_1.cli.action.stop();
    }
}
exports.default = GenerateClient;
GenerateClient.description = 'Generate a Wallet Provider or Terra.js compatible TypeScript client.';
GenerateClient.flags = {
    'lib-path': command_1.flags.string({ default: './lib', description: 'location to place the generated client' }),
    dest: command_1.flags.string({ default: './frontend/src/contract' }),
    'build-schema': command_1.flags.boolean({ default: false }),
};
GenerateClient.args = [{ name: 'contract', required: true }];
