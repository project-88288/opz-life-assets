"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const command_1 = require("@oclif/command");
const path = tslib_1.__importStar(require("path"));
const repl = tslib_1.__importStar(require("repl"));
const terrajs = tslib_1.__importStar(require("@terra-money/terra.js"));
const env_1 = require("../lib/env");
const flag_1 = require("../lib/flag");
// Needed for Terrain to be able to require typescript modules.
require('ts-node').register({
    // Don't actually check types of libs.
    transpileOnly: true,
    // Make sure we don't double transpile source code.
    ignore: ['(?:^|/)node_modules/', 'src/commands/.*\\.ts', 'src/lib/.*\\.ts'],
});
class Console extends command_1.Command {
    async run() {
        var _a;
        const { flags } = this.parse(Console);
        const fromCwd = (p) => path.join(process.cwd(), p);
        const env = env_1.getEnv(fromCwd(flags['config-path']), fromCwd(flags['keys-path']), fromCwd(flags['refs-path']), flags.network, flags.signer);
        // eslint-disable-next-line global-require, import/no-dynamic-require
        let Lib = require(path.join(process.cwd(), 'lib'));
        let libInstance;
        // Detect if a default export exists and use that.
        if (Lib === null || Lib === void 0 ? void 0 : Lib.default) {
            Lib = Lib.default;
        }
        // Need the new keyword if Lib is a class.
        if (typeof Lib === 'function' && ((_a = Lib.prototype) === null || _a === void 0 ? void 0 : _a.constructor)) {
            libInstance = new Lib(env);
        }
        else {
            libInstance = Lib(env);
        }
        // for repl server
        const { config, refs, wallets, client, } = env;
        const r = repl.start({ prompt: 'terrain > ', useColors: true });
        const def = (name, value) => Object.defineProperty(r.context, name, {
            configurable: false,
            enumerable: true,
            value,
        });
        def('config', config);
        def('refs', refs);
        def('wallets', wallets);
        def('client', client);
        def('terrajs', terrajs);
        def('lib', libInstance);
    }
}
exports.default = Console;
Console.description = 'Start a repl console that provides context and convenient utilities to interact with the blockchain and your contracts.';
Console.flags = Object.assign({ signer: flag_1.signer,
    network: flag_1.network }, flag_1.terrainPaths);
Console.args = [];
