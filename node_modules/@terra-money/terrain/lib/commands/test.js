"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const command_1 = require("@oclif/command");
const child_process_1 = require("child_process");
const fs_1 = require("fs");
const TerrainCLI_1 = tslib_1.__importDefault(require("../TerrainCLI"));
/**
 * Runs unit tests for a contract directory.
 * Examples:
 * $ terrain test counter
 * $ terrain test counter --no-fail-fast
 */
class Test extends command_1.Command {
    async run() {
        // Extract args and flags specified in executed test command.
        const { args, flags } = this.parse(Test);
        // Specify default contract path from terrain project root directory.
        let contractPath = `contracts/${args['contract-name']}`;
        // Backtrack, up to 4 times, through file tree to find contract directory.
        for (let stepBack = 0; stepBack < 5; stepBack += 1) {
            // If contractPath available, alert user of testing initialization,
            // change working directory to contractPath and execute cargo test command.
            if (fs_1.existsSync(contractPath)) {
                TerrainCLI_1.default.success(`Testing '${args['contract-name']}' contract.`);
                process.chdir(contractPath);
                child_process_1.execSync(`cargo test ${flags['no-fail-fast'] ? '--no-fail-fast' : ''}`, { stdio: 'inherit' });
                process.exit();
            }
            // If contracts directory exists, but contractPath does not,
            // then contract referenced in terrain test command does not exist.
            if (fs_1.existsSync('contracts/') && !fs_1.existsSync(contractPath)) {
                TerrainCLI_1.default.error(`Contract '${args['contract-name']}' not available in contracts directory.`);
                process.exit();
            }
            // If contracts directory does not exist in current directory, step back one directory.
            contractPath = `../${contractPath}`;
        }
        // If contractPath not found after stepping back 4 directories,
        // tell user to run command in a terrain project directory.
        TerrainCLI_1.default.warning('Please ensure that you are in a terrain project directory.');
    }
}
exports.default = Test;
// Specify description to be displayed upon help command execution.
Test.description = 'Runs unit tests for a contract directory.';
// Specify examples included upon help test command execution.
Test.examples = [
    '$ terrain test counter',
    '$ terrain test counter --no-fail-fast',
];
// Initialize args to be given after test command.
Test.args = [{ name: 'contract-name', required: true }];
// Initialize flags, prefixed with '--' in a terminal command, to be given after args.
Test.flags = {
    'no-fail-fast': command_1.flags.boolean({ description: 'Run all tests regardless of failure.' }),
};
